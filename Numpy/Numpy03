기술 통계 함수관련, 데이터 샘플링, 난수발생에 대한 이해
데이터 갯수 - len
평균 == 표본평균(통계) - mean
분산 == 표본분산(통계) - var
표준편차 - std
최대값
최소값
중앙값 - median
사분위수 - percentile
[3]
import numpy as np
from IPython.display import Image

def aryInfo(ary) :
    print('type - ' , type(ary))
    print('shape - ' , ary.shape)
    print('dimension - ' , ary.ndim)
    print('dtype - ' , ary.dtype)
    print()
    print('data - \n' , ary)
[4]
ary = np.array([18, 5, 10, 23, 19, -8, 10, 0, 0, 5, 2, 15, 8, 2, 5, 4, 15, -1, 4, 7, 9])
aryInfo(ary)
type -  <class 'numpy.ndarray'>
shape -  (21,)
dimension -  1
dtype -  int32

data -
 [18  5 10 23 19 -8 10  0  0  5  2 15  8  2  5  4 15 -1  4  7  9]

[10]
print('데이터 갯수 - ' , len(ary))
print('표본평균    - ' , np.mean(ary))
print('분산        - ' , np.var(ary))
print('편차        - ' , np.std(ary))
print('최대값      - ' , np.max(ary))
print('최소값      - ' , np.min(ary))
print('중위수      - ' , np.median(ary))

데이터 갯수 -  21
표본평균    -  7.238095238095238
분산        -  54.181405895691604
편차        -  7.360801987262774
최대값      -  23
최소값      -  -8
중위수      -  5.0

사분위수
[11]
Image('c:/img/img/numpy_percentile_img.png' , width = 700)

[15]
print('최소값     - ' , np.percentile(ary, 0))
print('1사분위 값 - ' , np.percentile(ary, 25))
print('2사분위 값 - ' , np.percentile(ary, 50))
print('3사분위 값 - ' , np.percentile(ary, 75))
print('최대값     - ' , np.percentile(ary, 100))

최소값     -  -8.0
1사분위 값 -  2.0
2사분위 값 -  5.0
3사분위 값 -  10.0
최대값     -  23.0

난수생성
np.random

rand() : 0 ~ 1 사이에 균일한 확률분포로 실수 난수를 생성하는 함수

randn() : 가우시안 표준정규분포

randint() : 0 ~ 1 사이에 균일한 확률분포로 정수 난수를 생성하는 함수

[16]
np.random.rand(10)
array([0.69199243, 0.184681  , 0.54790407, 0.85055056, 0.3609922 ,
       0.6569433 , 0.21623611, 0.11803245, 0.52659018, 0.92449412])
[17]
np.random.rand(3 , 5)
array([[0.80885643, 0.61883613, 0.81005761, 0.98425177, 0.83329697],
       [0.45469298, 0.7231658 , 0.6058046 , 0.7872358 , 0.48191959],
       [0.77325364, 0.06329716, 0.45347099, 0.1988605 , 0.00925343]])
[18]
np.random.randn(10)
array([ 0.53872163,  0.01705776, -1.07837526, -1.09210973,  0.39193225,
        1.47181218, -0.82796411, -0.00204965,  0.73307904, -0.07085688])
[19]
np.random.randn(3,5)
array([[-0.29313441,  0.31202493,  0.33882004, -0.87223331, -2.21065439],
       [-1.84875513, -0.37222917, -0.08416689, -0.26599889,  0.35153119],
       [ 0.10549792,  0.70910682, -0.86490989, -0.58168924,  1.141229  ]])
[51]
np.random.randint(10 , 20 , size=10)
array([10, 18, 11, 18, 13, 17, 18, 12, 16, 19])
[52]
np.random.randint(10 , 20 , size=(3,5))
array([[18, 15, 19, 12, 11],
       [15, 14, 14, 11, 18],
       [15, 18, 12, 17, 19]])
데이터 샘플링
np.random.choice(ary, size , replace=T|F , p)
[61]
np.random.choice(100 , 10 , replace = False)
array([27, 94, 54, 30, 49, 77, 87, 31, 32, 33])
[63]
np.random.choice(5, 10, p=[0.1, 0, 0.3, 0.6, 0])
array([2, 3, 0, 3, 2, 3, 0, 3, 3, 3])
[66]
print('[문제01] 동전을 20번 던져서 앞면(1) 과 뒷면(0) 나오는 실험을 한다면? - ')
coin = np.random.choice(2, 20, replace = True)
print(coin)
print()
coin = np.random.randint(0,2, 20)
print(coin)
[문제01] 동전을 20번 던져서 앞면(1) 과 뒷면(0) 나오는 실험을 한다면? -
[0 0 0 0 1 1 0 0 0 1 1 0 0 0 1 1 1 1 0 1]

[1 0 1 0 0 0 1 1 0 1 0 0 0 1 0 1 0 0 1 1]

[71]
print('[문제02] 주사위를 100번 던져서 나오는 숫자의 평균을 구한다면? - ')
dice = np.random.choice(np.arange(1,7) , 100, replace = True)
print('dice - ' , dice)
print()
print('dice mean - ' , np.mean(dice))

print()
dice = np.random.randint(1, 7, size = (1, 100))
print('dice - ' , dice)
print()
print('dice mean - ' , np.mean(dice))

[문제02] 주사위를 100번 던져서 나오는 숫자의 평균을 구한다면? -
dice -  [6 4 2 4 5 2 5 4 1 5 1 5 1 1 3 3 1 6 2 6 1 5 4 4 3 1 5 1 3 3 2 5 6 2 4 3 6
 5 2 3 4 1 1 3 4 6 3 4 3 5 6 1 2 5 1 2 3 1 1 3 5 2 4 5 3 2 3 5 2 6 3 1 3 2
 1 2 5 2 2 1 6 6 4 3 6 6 1 3 1 3 2 2 5 6 2 2 1 5 2 5]

dice mean -  3.24

dice -  [[5 2 1 4 2 1 1 6 5 6 6 5 4 2 1 6 3 4 2 4 2 3 2 6 6 2 1 2 6 6 1 3 6 1 3 4
  2 4 6 1 1 1 5 3 1 6 6 3 1 2 3 1 5 6 2 1 1 4 1 3 5 3 6 3 6 6 4 5 2 1 4 3
  2 2 6 5 2 6 1 2 3 5 6 1 1 2 4 4 2 5 3 4 1 6 5 3 6 5 3 4]]

dice mean -  3.4

[74]
print('[문제03] 가격이 10,000원인 주식이 있다. 이 주식의 일간 수익률(%)의 기대값 0 이고 표준편차가 1 인 표준정규분포를 따른다고 가정하고 ')
print('250일 동안의 주가를 무작위로 생성하고 싶다면? - ')
print()
price = 10000
stock = price + price * np.random.randn(250) / 100
print(stock)
[문제03] 가격이 10,000원인 주식이 있다. 이 주식의 일간 수익률(%)의 기대값 0 이고 표준편차가 1 인 표준정규분포를 따른다고 가정하고
250일 동안의 주가를 무작위로 생성하고 싶다면? -

[ 9794.16468879 10227.54817666  9931.42919829  9899.68556204
 10046.28949518  9949.64833553  9967.19624872  9997.55622957
 10048.7899371   9920.4852786   9983.86623855  9989.51281973
 10017.65924448 10117.89685275  9938.16464876  9986.17075113
 10086.40565419  9954.43670689 10103.8242879   9986.44925702
 10041.20582491 10073.201547   10076.70069785 10168.45363917
 10126.1991669  10021.98860708 10031.31365144  9873.18402569
  9904.57909905 10061.22277996 10123.95884891  9994.23935159
 10043.88355275  9953.40678733  9806.76870846  9927.24437535
 10098.23298037  9920.18527339  9822.57486181 10016.36130697
  9834.50403428 10058.81438379  9868.06830027  9902.49903486
  9951.4974823  10177.89816179  9812.4907941   9905.47216166
 10054.29752461  9956.61540451  9811.6511734   9912.25192235
  9890.53498523  9933.4356182  10125.83193468 10064.43722293
 10043.16771858 10025.36123177  9992.70418616  9923.64831733
 10086.04490293  9896.83759815  9975.91513368  9817.58479036
 10094.53302393  9982.83094815  9973.63097884  9966.94400139
  9952.86034119 10041.48169276 10069.65939921 10033.90503832
 10078.29098135  9996.21018729  9879.68672737  9881.63274978
  9844.60507366  9956.27875275  9875.75811979 10057.32007859
  9896.02678295  9930.87139958 10070.62224405  9899.8591828
 10167.78321493  9842.99797723 10018.67486158  9898.79518723
  9923.11599388  9935.58626517 10096.38069706 10009.13585763
 10074.20002222 10078.36285189  9943.14549093  9771.53413238
 10012.61800091 10038.37130326  9883.58581036  9979.27631315
  9858.8231387  10042.0630578  10036.98505395  9908.16985548
  9824.53970868 10063.53407827 10175.44636767  9905.33365634
  9950.7322379  10015.23461369  9788.04375311 10211.83006433
 10101.70019129 10115.37275247 10122.17241541  9878.84642878
 10046.09851658 10063.30082776 10152.47039699  9960.45623328
  9977.50061227  9958.57733372  9851.41049752 10032.80084297
 10080.98112901  9844.79260202  9868.01043178  9829.74394991
  9969.29949944 10077.65524426 10061.16922624  9899.4894966
  9864.72586715  9879.66983541 10142.05809011  9889.97879099
 10044.48961733 10149.66356627  9959.1432738  10031.7626126
  9927.46521624 10042.85649917 10044.57015736 10107.62175409
 10031.32426955 10142.42724953 10117.4223403   9989.63623863
 10065.75179404  9979.12738879 10053.4745766  10208.2577173
  9840.00141547 10031.80271621  9970.38816382 10225.40269239
  9852.39809618 10043.52887517 10267.18574657 10055.38566007
  9937.84326388 10027.30020826  9904.64605173  9944.45676177
  9916.19355749  9991.31138282 10017.82796419  9807.48693734
  9894.94182821  9960.53161412  9878.7647367  10022.97483875
 10114.12840738  9959.50030234  9995.62076612  9939.4804307
 10095.05839279 10005.37623759  9892.23066123  9950.23997054
 10239.13320121 10018.91666933 10006.29495642 10009.03077397
  9967.0790832  10188.66849848  9823.68704083 10000.89405157
 10051.35523256 10202.26483488  9941.90236704 10165.81009804
  9880.96750648  9933.16872471 10214.76563379  9922.07651358
 10094.33880113 10155.57940489  9993.89482636  9875.78500445
  9887.47901182 10054.88779796 10133.49283507 10063.76948896
  9877.76383958 10034.47354484 10059.08714785  9885.23307292
  9872.79061896 10067.13975402 10144.2307727  10028.74437925
  9972.18917444 10106.41612896  9801.4702074  10053.68070777
  9780.0858389  10092.23807038  9911.46685905  9876.30706904
  9992.87072398  9988.51277602  9991.60959582  9942.27261824
  9760.27047862  9955.85003328  9867.58623059 10254.86827692
  9943.89978593 10118.86571244 10032.08568978  9921.54427726
  9801.05358999  9974.12369973 10003.70610935 10179.26644872
  9940.12178265 10138.90010637  9796.19084787  9938.27135718
  9874.0020672   9974.88831891 10029.90764766 10071.70629445
 10102.0583424   9937.58230279 10028.44448276 10059.13363034
  9961.48353133 10039.84100828]

[76]
import matplotlib.pyplot as plt

plt.hist(stock)
plt.show()

seed()
[86]
np.random.rand(5)
array([0.96908383, 0.13543309, 0.55848448, 0.33251509, 0.93011719])
[87]
np.random.rand(10)
array([0.36026097, 0.51455137, 0.30623533, 0.84033875, 0.30181069,
       0.92537692, 0.03719004, 0.13579076, 0.809601  , 0.01651429])
[88]
np.random.rand(10)
array([0.09401049, 0.59623609, 0.53885613, 0.95969368, 0.4822097 ,
       0.84288944, 0.17120641, 0.51050053, 0.22782038, 0.560551  ])
[107]
np.random.seed(100)
np.random.rand(5)
array([0.54340494, 0.27836939, 0.42451759, 0.84477613, 0.00471886])
array([0.54340494, 0.27836939, 0.42451759, 0.84477613, 0.00471886])
데이터 카운팅
unique : 중복된 값을 제거하고 중복되지않는 값을 리턴
[108]
np.unique([9, 9, 1, 1, 14, 13, 17, 14])
array([ 1,  9, 13, 14, 17])
[110]
idx , cnt = np.unique([9, 9, 1, 1, 14, 13, 17, 14] , return_counts = True)
[111]
idx
array([ 1,  9, 13, 14, 17])
[112]
cnt
array([2, 2, 1, 2, 1], dtype=int64)
특정범위 수인 경우에는 count 대산 bincount 사용한다
[124]
dice = np.random.choice(np.arange(1,7) , 10 , replace = True )
print('dice - ' , dice)
print()

idx , cnt = np.unique(dice , return_counts = True)
print('idx - ' , idx)
print('cnt - ' , cnt)
print()
print('bincount - ' , np.bincount(dice , minlength = 6 ))
dice -  [4 4 2 3 4 1 2 6 6 2]

idx -  [1 2 3 4 6]
cnt -  [1 3 1 3 2]

bincount -  [0 1 3 1 3 0 2]

기후통계분석.csv 파일을 이용한 [실습]
[126]
print('[요구사항] 기상관측이래 서울의 최고기온이 가장 높았던 날짜 와 최고기온을 확인하고자 한다면? - ')
print('case01. open() 방법 - import csv')
print('case02. np.loadtxt() 방법 - ')
[요구사항] 기상관측이래 서울의 최고기온이 가장 높았던 날짜 와 최고기온을 확인하고자 한다면? -
case01. open() 방법 - import csv
case02. np.loadtxt() 방법 -

[130]
print('case02 - ')
print()

raw_data = np.loadtxt('./numpy_data/기후통계분석.csv' ,
                      delimiter=',' ,
                      dtype = 'U' ,
                      skiprows = 1 )
aryInfo(raw_data)
case02 -

type -  <class 'numpy.ndarray'>
shape -  (40414, 5)
dimension -  2
dtype -  <U10

data -
 [['1907-10-01' '108' '13.5' '7.9' '20.7']
 ['1907-10-02' '108' '16.2' '7.9' '22']
 ['1907-10-03' '108' '16.2' '13.1' '21.3']
 ...
 ['2021-08-23' '108' '22.4' '21' '24']
 ['2021-08-24' '108' '23.4' '21.1' '26.4']
 ['2021-08-25' '108' '25' '23.5' '27.3']]

[135]
temps = raw_data[ : , 4 ]
temps = temps.astype(float)
temps
array([20.7, 22. , 21.3, ..., 24. , 26.4, 27.3])
[143]
idx = np.argsort(temps)[::-1][0]
print('최고 기온의 날짜 : ', raw_data[idx , 0], '최고 기온 : ', raw_data[idx , -1])

최고 기온의 날짜 :  2018-08-01 최고 기온 :  39.6

[141]
highesttemprow = raw_data[:,-1].astype('f').argmax(axis=0)
print('idx - ' , highesttemprow)
print('최고 기온의 날짜 : ', raw_data[highesttemprow,0], '최고 기온 : ', raw_data[highesttemprow,-1])

idx -  39293
최고 기온의 날짜 :  2018-08-01 최고 기온 :  39.6

[149]
import csv

print('case01 - ')
print()

file  = open('./numpy_data/기후통계분석.csv' , 'r')
raw_data = csv.reader(file , delimiter=',')

print('type - ' , type(raw_data))
header = next(raw_data)
print('hreader - ' , header)

tempLst = []
for row in raw_data :
    tempLst.append(row)
file.close()

ary = np.array(tempLst)

case01 -

type -  <class '_csv.reader'>
hreader -  ['날짜', '지점', '평균기온(℃)', '최저기온(℃)', '최고기온(℃)']

[150]
type(ary)
numpy.ndarray
