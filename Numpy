Numpy 학습
학습목표
배열과 리스트의 차이점
배열생성 및 다루는 기법
기술통계함수
결과에 대한 분석방법
Array
모든 원소가 같은 자료형이여야 한다
원소의 갯수를 바꿀 수 없다(resizing X)
배열의 차원, 크기, 타입(ndim, shape, dtype)
[2]
import numpy as np
np.__version__
'1.20.3'
[33]
def aryInfo(ary) :
    print('type - ' , type(ary))
    print('shape - ' , ary.shape)
    print('dimension - ' , ary.ndim)
    print('dtype - ' , ary.dtype)
    print()
    print('data - \n' , ary)
[14]
oneAry = np.array([0,1,2,3,4,5,6,7,8,9])
aryInfo(oneAry)
type -  <class 'numpy.ndarray'>
shape -  (10,)
dimension -  1
dtype -  int32

data -  [0 1 2 3 4 5 6 7 8 9]

vectorized operation(벡터화 연산)
각 원소에 대한 반복연산을 하나의 명령어로 처리하는 것
비교, 산술, 논리연산을 포함하는 모든 수학연산에 적용됨...
[15]
data = [0,1,2,3,4,5,6,7,8,9]
data * 2

[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
[16]
result = []

for d in data :
    result.append(d * 2)

print(result)
[0, 2, 4, 6, 8, 10, 12, 14, 16, 18]

[17]
result2 = [d * 2 for d in data]
print(result2)
[0, 2, 4, 6, 8, 10, 12, 14, 16, 18]

[18]
result3 = oneAry * 2
print(result3)
[ 0  2  4  6  8 10 12 14 16 18]

[19]
data01 = [1, 2, 3, 4, 5]
data02 = [10, 20, 30, 40, 50]

print(type(data01) , type(data02))
<class 'list'> <class 'list'>

array() 함수를 이용해서 시퀀형을 넘파이의 배열로 타입을 변경할 수 있다
[20]
xAry = np.array(data01)
yAry = np.array(data02)

print(type(xAry) , type(yAry))
<class 'numpy.ndarray'> <class 'numpy.ndarray'>

[24]
print('산술연산 - ')

aryInfo(xAry + yAry)

print()
aryInfo(2 * xAry + yAry)
산술연산 -
type -  <class 'numpy.ndarray'>
shape -  (5,)
dimension -  1
dtype -  int32

data -  [11 22 33 44 55]

type -  <class 'numpy.ndarray'>
shape -  (5,)
dimension -  1
dtype -  int32

data -  [12 24 36 48 60]

[26]
print('비교 연산 - boolean masking')

print( xAry == 2 )
print()
aryInfo(xAry == 2 )
비교 연산 - boolean masking
[False  True False False False]

type -  <class 'numpy.ndarray'>
shape -  (5,)
dimension -  1
dtype -  bool

data -  [False  True False False False]

[27]
print('비교 연산 - boolean masking')

print( yAry > 10 )
print()
aryInfo( yAry > 10 )
비교 연산 - boolean masking
[False  True  True  True  True]

type -  <class 'numpy.ndarray'>
shape -  (5,)
dimension -  1
dtype -  bool

data -  [False  True  True  True  True]

[30]
print('논리 연산 - ')

print( (xAry == 2) | (yAry > 10) )
print()
aryInfo( (xAry == 2) | (yAry > 10) )
논리 연산 -
[False  True  True  True  True]

type -  <class 'numpy.ndarray'>
shape -  (5,)
dimension -  1
dtype -  bool

data -  [False  True  True  True  True]

2차원 배열
N - Dimensional Array
행렬(matrix)
list of list
list of list of list
[39]
print('2개의 행과 3개의 열을 갖는 배열을 만든다면 ? - ')
twoAry = np.array([[1,2,3],[4,5,6]] , dtype = np.float64)

print()
aryInfo(twoAry)

print()
print('len() - ')
print('len() 행의 갯수 - ' ,  len(twoAry))
print('len() 행의 요소의 갯수, 즉 열을 의미한다 -  ' , len(twoAry[0]))
print('len() 행의 요소의 갯수, 즉 열을 의미한다 -  ' , len(twoAry[1]))

2개의 행과 3개의 열을 갖는 배열을 만든다면 ? -

type -  <class 'numpy.ndarray'>
shape -  (2, 3)
dimension -  2
dtype -  float64

data -
 [[1. 2. 3.]
 [4. 5. 6.]]

len() -
len() 행의 갯수 -  2
len() 행의 요소의 갯수, 즉 열을 의미한다 -   3
len() 행의 요소의 갯수, 즉 열을 의미한다 -   3

[45]
print('3차원 - 3 * 4 2개의 레이어 - ')
threeAry = np.array([ [ [1,2,3,4], [5,6,7,8], [9,10,11,12] ], [ [13,14,15,16], [17,18,19,20], [21,22,23,24] ]])

print()
aryInfo(threeAry)

print()
print('len() - depth' , len(threeAry))
print('len() - ' , len(threeAry[0]))
print('len() - ' , len(threeAry[1]))
print('row col - ' , len(threeAry[0][0] ))

3차원 - 3 * 4 2개의 레이어 -

type -  <class 'numpy.ndarray'>
shape -  (2, 3, 4)
dimension -  3
dtype -  int32

data -
 [[[ 1  2  3  4]
  [ 5  6  7  8]
  [ 9 10 11 12]]

 [[13 14 15 16]
  [17 18 19 20]
  [21 22 23 24]]]

len() - depth 2
len() -  3
len() -  3
row col -  4

요소의 타입을 변경할 때 사용하는 함수 : astype()
[46]
typeChange = threeAry.astype(np.float64)
aryInfo(typeChange)
type -  <class 'numpy.ndarray'>
shape -  (2, 3, 4)
dimension -  3
dtype -  float64

data -
 [[[ 1.  2.  3.  4.]
  [ 5.  6.  7.  8.]
  [ 9. 10. 11. 12.]]

 [[13. 14. 15. 16.]
  [17. 18. 19. 20.]
  [21. 22. 23. 24.]]]

배열도 인덱싱과 슬라이싱이 가능하다
[47]
idxAry = np.array([1,2,3,4,5,6,7,8,9])
aryInfo(idxAry)
type -  <class 'numpy.ndarray'>
shape -  (9,)
dimension -  1
dtype -  int32

data -
 [1 2 3 4 5 6 7 8 9]

[50]
print('indexing - ')
print(idxAry[0])
print(idxAry[1])
indexing -
1
2

[62]
aryInfo(twoAry)

print()
print('첫번째 행의 첫번째 열의 값 - ')
print(twoAry[0 , 0])

print()
print('마지막 행의 마지막 열 - ')
print(twoAry[-1, -1])

print()
print('첫번째 행의 전체 - ')
print(twoAry[0, : ])

print()
print('첫번째 행의 두번째부터 끝까지 - ')
print(twoAry[0 , 1 : ])


print()
print('행이 아닌 y 축의 값을 구할 때 - ')
print(twoAry[ : , 1])


type -  <class 'numpy.ndarray'>
shape -  (2, 3)
dimension -  2
dtype -  float64

data -
 [[1. 2. 3.]
 [4. 5. 6.]]

첫번째 행의 첫번째 열의 값 -
1.0

마지막 행의 마지막 열 -
6.0

첫번째 행의 전체 -
[1. 2. 3.]

첫번째 행의 두번째부터 끝까지 -
[2. 3.]

행이 아닌 y 축의 값을 구할 때 -
[2. 5.]

[66]
matrixAry = np.array([[0,1,2,3,4],[5,6,7,8,9],[10,11,12,13,14]])
aryInfo(matrixAry)
type -  <class 'numpy.ndarray'>
shape -  (3, 5)
dimension -  2
dtype -  int32

data -
 [[ 0  1  2  3  4]
 [ 5  6  7  8  9]
 [10 11 12 13 14]]

[67]
'''
요구사항 구현 [실습] -
이 행렬에서 값 7 을 인덱싱한다.
이 행렬에서 값 14 을 인덱싱한다.
이 행렬에서 배열 [6, 7] 을 슬라이싱한다.
이 행렬에서 배열 [7, 12] 을 슬라이싱한다.
이 행렬에서 배열 [[3, 4], [8, 9]] 을 슬라이싱한다.
'''
'\n요구사항 구현 [실습] - \n이 행렬에서 값 7 을 인덱싱한다.\n이 행렬에서 값 14 을 인덱싱한다.\n이 행렬에서 배열 [6, 7] 을 슬라이싱한다.\n이 행렬에서 배열 [7, 12] 을 슬라이싱한다.\n이 행렬에서 배열 [[3, 4], [8, 9]] 을 슬라이싱한다.\n'
[68]
print()
print('이 행렬에서 값 7 을 인덱싱한다. - ' , matrixAry[ 1 , 2 ])
print('이 행렬에서 값 14 을 인덱싱한다. - ', matrixAry[ -1 , -1 ])
print('이 행렬에서 배열 [6, 7] 을 슬라이싱한다. - ' , matrixAry[ 1 , 1:3 ] , type(matrixAry[ 1 , 1:3 ]))
print('이 행렬에서 배열 [7, 12] 을 슬라이싱한다. - ', matrixAry[ 1:3 , 2 ])
print('이 행렬에서 배열 [[3, 4], [8, 9]] 을 슬라이싱한다. - ' ,   matrixAry[ 0:2 , 3:5 ] ,
                                                                  type(matrixAry[ 0:2 , 3:5 ]) ,
                                                                  matrixAry[ 0:2 , 3:5 ].ndim)

이 행렬에서 값 7 을 인덱싱한다. -  7
이 행렬에서 값 14 을 인덱싱한다. -  14
이 행렬에서 배열 [6, 7] 을 슬라이싱한다. -  [6 7] <class 'numpy.ndarray'>
이 행렬에서 배열 [7, 12] 을 슬라이싱한다. -  [ 7 12]
이 행렬에서 배열 [[3, 4], [8, 9]] 을 슬라이싱한다. -  [[3 4]
 [8 9]] <class 'numpy.ndarray'> 2

fancy indexing
boolean indexing
정수배열 indexing
[70]
ary = np.array([0,1,2,3,4,5,6,7,8,9])
aryInfo(ary)
type -  <class 'numpy.ndarray'>
shape -  (10,)
dimension -  1
dtype -  int32

data -
 [0 1 2 3 4 5 6 7 8 9]

[78]
print('짝수의 원소를 골라내고 싶다면 ? - ')

# print( ary%2 == 0 )
idx = np.array([ True, False,  True, False,  True, False,  True, False,  True, False])
print( ary[idx] )

print()
print( ary[ ary%2 == 0 ] )

print('정수배열 인덱싱으로 구현한다면 ? ')

oddIdx  = np.array([0, 2, 4, 6, 8])
evenIdx = np.array([1, 3, 5, 7, 9])
print()
print( ary[oddIdx] )
print( ary[evenIdx] )

짝수의 원소를 골라내고 싶다면 ? -
[0 2 4 6 8]

[0 2 4 6 8]
정수배열 인덱싱으로 구현한다면 ?

[0 2 4 6 8]
[1 3 5 7 9]

[79]
ary % 2
array([0, 1, 0, 1, 0, 1, 0, 1, 0, 1], dtype=int32)
[86]
ary = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])
aryInfo(ary)

print()
print('3의 배수 출력 - ' , ary[ ary%3 == 0] )
print('4로 나누면 1이 남는 수를 출력 - ' , ary[ ary%4 == 1])
print('3의 배수이고 4로 나누면 1이 남는 수를 출력 - ' , ary[ (ary%3 == 0) & (ary%4 == 1) ])
type -  <class 'numpy.ndarray'>
shape -  (20,)
dimension -  1
dtype -  int32

data -
 [ 1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20]

3의 배수 출력 -  [ 3  6  9 12 15 18]
4로 나누면 1이 남는 수를 출력 -  [ 1  5  9 13 17]
3의 배수이고 4로 나누면 1이 남는 수를 출력 -  [9]

dtype 지정할 자료형은 접두어
np.float64 -> 'f'
np.int32 -> 'i'
문자열 -> 'U'
[90]
ary = np.array([1,2,3] , dtype='i')
aryInfo(ary)
type -  <class 'numpy.ndarray'>
shape -  (3,)
dimension -  1
dtype -  int32

data -
 [1 2 3]

arange()
[95]
ary = np.arange(0, 12, 1).reshape(3,4)
aryInfo(ary)
type -  <class 'numpy.ndarray'>
shape -  (3, 4)
dimension -  2
dtype -  int32

data -
 [[ 0  1  2  3]
 [ 4  5  6  7]
 [ 8  9 10 11]]

[106]
'''
아래 결과를 출력하도록 실습

indxing :  10
slicing : [6]
slicing : [[5]]
fancy indexing : [2 10]
fancy indexing : [[2] [10] ]
fancy indexing : [[0 2] [4 6] [8 10] ]
'''
'\n아래 결과를 출력하도록 실습\n\nindxing :  10\nslicing : [6]\nslicing : [[5]]\nfancy indexing : [2 10] \nfancy indexing : [[2] [10] ]\nfancy indexing : [[0 2] [4 6] [8 10] ]\n'
[123]
print(ary[2 , 2] , type(ary[2 , 2]))

print(ary[ 1 : 2 , 2] , type(ary[ 1 : 2 , 2]))

print(ary[ 1:2 , 1:2] , type(ary[ 1:2 , 1:2]))

idx = [0,2]
print(ary[ idx , 2 ])

print(ary[ idx , 2:3 ])

print('fanacy indexing  아님 - ')
print(ary[ : , [0,2] ])


10 <class 'numpy.int32'>
[6] <class 'numpy.ndarray'>
[[5]] <class 'numpy.ndarray'>
[ 2 10]
[[ 2]
 [10]]
fanacy indexing  아님 -
[[ 0  2]
 [ 4  6]
 [ 8 10]]

배열 생성 함수
array()
zeros() , ones() , zeros_like() , ones_like() , empty() , arange() , linspace() , logspace()
[142]
print('1차원 - ')
zeroAry = np.zeros(5, dtype='i')
aryInfo(zeroAry)

print()

print('2차원 - ')
zeroAry = np.zeros((3,4), dtype='i')
aryInfo(zeroAry)

print('3차원 - ')
zeroAry = np.zeros((3, 3,4), dtype='i')
aryInfo(zeroAry)


1차원 -
type -  <class 'numpy.ndarray'>
shape -  (5,)
dimension -  1
dtype -  int32

data -
 [0 0 0 0 0]

2차원 -
type -  <class 'numpy.ndarray'>
shape -  (3, 4)
dimension -  2
dtype -  int32

data -
 [[0 0 0 0]
 [0 0 0 0]
 [0 0 0 0]]
3차원 -
type -  <class 'numpy.ndarray'>
shape -  (3, 3, 4)
dimension -  3
dtype -  int32

data -
 [[[0 0 0 0]
  [0 0 0 0]
  [0 0 0 0]]

 [[0 0 0 0]
  [0 0 0 0]
  [0 0 0 0]]

 [[0 0 0 0]
  [0 0 0 0]
  [0 0 0 0]]]

[128]
ary = np.zeros(5 , dtype='<U4')
aryInfo(ary)
type -  <class 'numpy.ndarray'>
shape -  (5,)
dimension -  1
dtype -  <U4

data -
 ['' '' '' '' '']

[130]
ary[0] = 'abc'
ary[1] = 'jslim'
ary[2] = 'abcd'
[131]
ary
array(['abc', 'jsli', 'abcd', '', ''], dtype='<U4')
[134]
print('1차원 - ')
oneAry = np.ones(5, dtype='U')
aryInfo(oneAry)

print()

print('2차원 - ')
oneAry = np.ones((3,4), dtype='i')
aryInfo(oneAry)

print('3차원 - ')
oneAry = np.ones((3, 3,4), dtype='i')
aryInfo(oneAry)
1차원 -
type -  <class 'numpy.ndarray'>
shape -  (5,)
dimension -  1
dtype -  <U1

data -
 ['1' '1' '1' '1' '1']

2차원 -
type -  <class 'numpy.ndarray'>
shape -  (3, 4)
dimension -  2
dtype -  int32

data -
 [[1 1 1 1]
 [1 1 1 1]
 [1 1 1 1]]
3차원 -
type -  <class 'numpy.ndarray'>
shape -  (3, 3, 4)
dimension -  3
dtype -  int32

data -
 [[[1 1 1 1]
  [1 1 1 1]
  [1 1 1 1]]

 [[1 1 1 1]
  [1 1 1 1]
  [1 1 1 1]]

 [[1 1 1 1]
  [1 1 1 1]
  [1 1 1 1]]]

[137]
o_likeAry = np.ones_like(oneAry , dtype='U')
aryInfo(o_likeAry)
type -  <class 'numpy.ndarray'>
shape -  (3, 3, 4)
dimension -  3
dtype -  <U1

data -
 [[['1' '1' '1' '1']
  ['1' '1' '1' '1']
  ['1' '1' '1' '1']]

 [['1' '1' '1' '1']
  ['1' '1' '1' '1']
  ['1' '1' '1' '1']]

 [['1' '1' '1' '1']
  ['1' '1' '1' '1']
  ['1' '1' '1' '1']]]

[138]
emptyAry = np.empty( (4,3) )
aryInfo(emptyAry)
type -  <class 'numpy.ndarray'>
shape -  (4, 3)
dimension -  2
dtype -  float64

data -
 [[4.24399158e-314 8.48798317e-314 1.27319747e-313]
 [1.69759663e-313 2.12199579e-313 2.54639495e-313]
 [2.97079411e-313 3.39519327e-313 3.81959242e-313]
 [4.24399158e-313 4.66839074e-313 5.09278990e-313]]

[141]
np.arange(10 , 20 , 2)
array([10, 12, 14, 16, 18])
[146]
np.linspace(1, 10 , 4)
array([ 1.,  4.,  7., 10.])
[149]
np.arange(0, 10, 2).reshape(5,1)
array([[0],
       [2],
       [4],
       [6],
       [8]])
전치행렬(transpose matrix) ? 행렬의 행은 열로, 열은 행으로 바꿔주는 행렬을 의미한다
[150]
ary = np.array([ [1, 2, 3] , [4, 5, 6] ] )
aryInfo(ary)
type -  <class 'numpy.ndarray'>
shape -  (2, 3)
dimension -  2
dtype -  int32

data -
 [[1 2 3]
 [4 5 6]]

[151]
ary = np.arange(1,7).reshape(2,3)
aryInfo(ary)
type -  <class 'numpy.ndarray'>
shape -  (2, 3)
dimension -  2
dtype -  int32

data -
 [[1 2 3]
 [4 5 6]]

[152]
ary_transpose = ary.T
aryInfo(ary_transpose)
type -  <class 'numpy.ndarray'>
shape -  (3, 2)
dimension -  2
dtype -  int32

data -
 [[1 4]
 [2 5]
 [3 6]]

[160]
vec = np.arange(10)
aryInfo(vec)

print()
print('1차원 배열에 대한 전치연산은 가능할까? - ' , vec.T)
print('안된다...그런데 방법이 있을까? - ')
print()

vec_transpose = vec.reshape(1, 10 ).T
aryInfo(vec_transpose)
type -  <class 'numpy.ndarray'>
shape -  (10,)
dimension -  1
dtype -  int32

data -
 [0 1 2 3 4 5 6 7 8 9]

1차원 배열에 대한 전치연산은 가능할까? -  [0 1 2 3 4 5 6 7 8 9]
안된다...그런데 방법이 있을까? -

type -  <class 'numpy.ndarray'>
shape -  (10, 1)
dimension -  2
dtype -  int32

data -
 [[0]
 [1]
 [2]
 [3]
 [4]
 [5]
 [6]
 [7]
 [8]
 [9]]

만약 다차원 배열을 1 차원으로 만들어야 한다면?
flatten()
[161]
vec_transpose.flatten()
array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
배열 사용시 주의할 점(차원에 대한 주의가 필요함!!!)
[167]
ary = np.arange(10)
aryInfo(ary)

print()
print('reshape - ')
aryInfo(ary.reshape(1,10))

print()
print('reshape - ')
aryInfo(ary.reshape(10,1))

print()
print('reshape 이 아닌 차원증가를 위해서는 : newaxis - ')
aryInfo( ary[ np.newaxis , : ] )
print()
aryInfo( ary[ : ,  np.newaxis ] )

type -  <class 'numpy.ndarray'>
shape -  (10,)
dimension -  1
dtype -  int32

data -
 [0 1 2 3 4 5 6 7 8 9]

reshape -
type -  <class 'numpy.ndarray'>
shape -  (1, 10)
dimension -  2
dtype -  int32

data -
 [[0 1 2 3 4 5 6 7 8 9]]

reshape -
type -  <class 'numpy.ndarray'>
shape -  (10, 1)
dimension -  2
dtype -  int32

data -
 [[0]
 [1]
 [2]
 [3]
 [4]
 [5]
 [6]
 [7]
 [8]
 [9]]

reshape 이 아닌 차원증가를 위해서는 : newaxis -
type -  <class 'numpy.ndarray'>
shape -  (1, 10)
dimension -  2
dtype -  int32

data -
 [[0 1 2 3 4 5 6 7 8 9]]

type -  <class 'numpy.ndarray'>
shape -  (10, 1)
dimension -  2
dtype -  int32

data -
 [[0]
 [1]
 [2]
 [3]
 [4]
 [5]
 [6]
 [7]
 [8]
 [9]]

ndarray(배열) 모든원소에 대해서 순차적으로 접근해야 한다면?
iternext() , finished
[171]
ary = np.arange(10)
ary
array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
[172]
for tmp in ary :
    print(tmp, end='\t')
0	1	2	3	4	5	6	7	8	9
[174]
print('1차원 ndarray 대한 iterator - ')

ite = np.nditer(ary , flags = ['c_index'] )

while not ite.finished :
    idx = ite.index
    print('idx - ' , idx , ary[idx])
    ite.iternext()
1차원 ndarray 대한 iterator -
idx -  0 0
idx -  1 1
idx -  2 2
idx -  3 3
idx -  4 4
idx -  5 5
idx -  6 6
idx -  7 7
idx -  8 8
idx -  9 9

[175]
ary_reshape = ary.reshape(2,5)
ary_reshape
array([[0, 1, 2, 3, 4],
       [5, 6, 7, 8, 9]])
[179]
print('shape - ' , ary_reshape.shape)
print('row   - ' , ary_reshape.shape[0])
print('col   - ' , ary_reshape.shape[1])
shape -  (2, 5)
row   -  2
col   -  5

[184]
for row in range(ary_reshape.shape[0]) :
    for col in range(ary_reshape.shape[1]) :
        print( ary_reshape[row][col] , end = '\t')
    print()

print()
print('nditer - ')

ite = np.nditer(ary_reshape , flags = ['multi_index'] )
while not ite.finished :
    idx = ite.multi_index
    print(ary_reshape[idx] , end='\t')
    ite.iternext()

0	1	2	3	4
5	6	7	8	9

nditer -
0	1	2	3	4	5	6	7	8	9
